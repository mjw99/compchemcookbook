memory 3 gb
scratch_dir /tmp
echo

start molecule

title "Methane Scan"
charge 0

geometry units angstroms noautoz nocenter noautosym
   C       -1.55829       -1.29231       -0.00626
   H       -0.46561       -1.29829        0.00208
   H       -1.92346       -0.58343        0.74087
   H       -1.92895       -2.29263        0.23025
   H       -1.91357       -0.99608       -0.99396
end

basis
  * library 6-31G*
end

dft
  xc b3lyp
  mult 1
  # Do not print the MO vector coefficients; just too much data.
  noprint "final vectors analysis"

  #D3: www.nwchem-sw.org/index.php/Release61:Density_Functional_Theory_for_Molecules
  disp vdw 3
end


#task rtdbprint



python

import math
from nwgeom import *

# Variables
atomZValueI = 6
atomZValueJ = 1
cutOffDistanceInAngstrom = 1.2


indexToZ = {}
indexToCoordinatesInAng = {}
bondsToConsider = []


# How many atoms are there?
numberOfAtoms = len(rtdb_get("geometry:geometry:charges"))

# Array of Z values per atom
ZArray = rtdb_get("geometry:geometry:charges")


rawGeometryInAu = rtdb_get("geometry:geometry:coords")
# Get scaling factor
angToAuFactor = rtdb_get('geometry:geometry:angstrom_to_au')
# Carry out conversion
rawGeometryInAng = map(lambda x: x/angToAuFactor, rawGeometryInAu)


# Note this runs 0 --> numberOfAtoms-1
for i in range(numberOfAtoms):
  # Add Atom to index
  indexToZ[i+1] = int(ZArray[i])

  # Add Cartesians to index
  # This pretty mess is due to the rawGeometryInAng starting from 0
  xInAu = (3*(i)) + 0
  yInAu = (3*(i)) + 1
  zInAu = (3*(i)) + 2

  indexToCoordinatesInAng[i+1] = rawGeometryInAng[xInAu], rawGeometryInAng[yInAu], rawGeometryInAng[zInAu]


# Show atom index, Zvalue and coordinates
#print "Index, Zvalue, Coordinates"
#for key in indexToZ.keys():
#  print key, indexToZ[key], indexToCoordinatesInAng[key]



# Step through index
for keyI in indexToZ.keys():
  # Select current Atom C
  if indexToZ[keyI] == atomZValueI:
    # Step through index
    for keyJ in indexToZ.keys():
      # Select atom H
      if indexToZ[keyJ] == atomZValueJ:
        # Calculate distance from C_i to H_j
        xInAng = float(indexToCoordinatesInAng[keyI][0]) - float(indexToCoordinatesInAng[keyJ][0])
        yInAng = float(indexToCoordinatesInAng[keyI][1]) - float(indexToCoordinatesInAng[keyJ][1])
        zInAng = float(indexToCoordinatesInAng[keyI][2]) - float(indexToCoordinatesInAng[keyJ][2])

        distInAng =  math.sqrt(xInAng*xInAng + yInAng*yInAng + zInAng*zInAng)

        # Typical C-H bond length
        if distInAng < cutOffDistanceInAngstrom :
          #print keyI, indexToZ[keyI], indexToCoordinatesInAng[keyI], keyJ, indexToZ[keyJ], indexToCoordinatesInAng[keyJ], distInAng
          bondsToConsider.append( (keyI, keyJ, distInAng) )

print "Bonds to consider for this molecule"
for item in bondsToConsider:
  print item


# Save Optimised geom for the moment
optimised_list = geom_get_coords('geometry')

for currentBond in bondsToConsider:

#Hack to only look at the first bond 
#for i in range(0, 1):
#  currentBond = bondsToConsider[0]

  # Restore optimised geom
  geom_set_coords('geometry', optimised_list)

  # Set our bond parameters
  atomI   = currentBond[0]
  atomJ   = currentBond[1]
  eqInAng = currentBond[2]
  #print "Atom i is " + str(atomI) + " atom j is " + str(atomJ) + " eqInAng (Ang) is " + str(eqInAng)



  # Scan

  geomWithOutBondInformation = '''
    geometry adjust
      zcoord
        bond  %i %i    %s cccc constant
      end
    end
  '''

  # This is truly dirty; I will go to Hell for this...
  geomWithBondInformation =  geomWithOutBondInformation % (atomI, atomJ, "%f")


  # How far aside of the equilibrium bond length should we go?
  minInAng = eqInAng - 0.1
  maxInAng = eqInAng + 0.1
  results=scan_input(geomWithBondInformation, [minInAng], [maxInAng], 25, 'dft', task_energy)

#for task_optimize, an array of [Step][Constraint distance in Ang, Energy in Hartrees][Gradient*3N] is returned
#hence, bond length of step 1 is results[0][0][0]
#       the energy of  step 1 is results[0][1][0]
#
#Results from step 1                         
#(  ([0.9601229970129712], (-40.50414714460964, [0.1305882123916416, -0.000685351393882445, 0.0008893831987804206, 
#                         -0.1305866917371298, 0.0006849901522953115, -0.0008888238087244316,
#                         -9.441926373254805e-07, 7.709099557606791e-07, 1.2856222834090048e-06,
#                         -1.2748148733865428e-07, -1.5786745028723015e-06, -6.099030355408153e-07,
#                         -4.4898038150525954e-07, 1.1690061331448565e-06, -1.2351093055806839e-06]
#    )
#), 

#for task_energy, an array of results[Step][Constraint distance in Ang, Energy in Hartrees] is returned
# ( ([0.9601624218239677], -40.504069984496326), 
# )

  #print "Results are "
  #print results

  # Temp arrays for r and E
  r = []
  E = []

  for i in range(0, len(results) ):
     # Bond length in Ang
     r.append(results[i][0][0])
     # Energy in Hartrees
     E.append(results[i][1])

  #Write data
  fileName = "bond_scan_" + str(atomI) + "_" + str(atomJ) + ".dat"
  f = open(fileName,'w')

  for i in range(0, len(r) ):
    f.write("%s, %s \n" % (float(r[i]), float(E[i])) )

  f.close()

end





# Initial optimisation
task dft optimize

# Do everything
task python

